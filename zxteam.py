import base64
exec(base64.b64decode("import base64
exec(base64.b64decode("aW1wb3J0IGJhc2U2NApleGVjKGJhc2U2NC5iNjRkZWNvZGUoImFXMXdiM0owSUdKaGMyVTJOQXBsZUdWaktHSmhjMlUyTkM1aU5qUmtaV052WkdVb0ltRlhNWGRpTTBvd1NVZEthR015VlRKT1FYQnNaVWRXYWt0SFNtaGpNbFV5VGtNMWFVNXFVbXRhVjA1MldrZFZiMGx0UmxoTldHUnBUVEJ2ZDFOVlpFdGhSMDE1VmxSS1QxRllRbk5hVldSWFlXdDBTRk50YUdwTmJGVjVWR3ROTVdGVk5YRlZiWFJoVmpBMU1sZHJaRlppTUd4eVlrUldVMWRHY0hKV01GVXhUbFpTUlZOcmRHcFNNSEIzVkRGa05HRlhTbk5pUnpWYVRVZG9lbFJWWkVkVFJUbFpWbXMxYTAxcWJIaFdiR1F3VmpGU2MxSnNXbXRTVm5CTFZXeFdkMWxXVGxaWGJUbHNWakJhV1ZWdE5WZFNSMFpXVGxaYVYxSkZSVEZXUmxwWFRsWkdjbFJzWkZkV00yaFBWbGQwVDFGdFZsWk9XRUpRVTBkb1QxVlljRzlPVmxKV1ZXdHdiRkpWTlhkV1IzaHJWRzFSZWxGdVpGcGlSMmhFV2tjeFQyUldWbGhhUjNCcFZsWnZlRll5ZEdwT1YxSkdWRzVTYVZOR1NuRlZibkJ6VGxad1JsUnJUbXhpVld3MVZrYzFTMWxXWkVkU2EzaGFWbTFPTkZwRVNrcGxiRTV4VVd0d1ZGSnJjREpYVkVsNFZqSkdSMk5GYUdsVFJscG9Xa1JPUTJReGJITmhSVTVyWWxVMU1WWldaR3RoYXpCNVpVUmFVazFxUm5wYVJXUlBVMFU1V1dKSGRGSk5SVzk1VjFST2EyUXlUa2hUYkd4U1lteHdjVmx0ZUVkaWJHdzJVMjVPYVdKVmNEQlZiVFZQVWtkS1dHVkVRbHBOUjAweFdsWmtVMUpHUm5GUmJXaFhaV3RhZWxWVVNYaFpWMVpZVTFoc1RsSXlVbkJVVkVGNFlteHNWMWt6YUd0TmEydzJWVEp3UTFOc1RrWk9SRVphWldzMVZGbHJaRXRXUjFGNVdrZHNhVlpXYjNkV01uaEhaR3hOZVZOWWNGVlhSbHB4VkZSS05FNXNjRVphUm1SclVsaFNSVlV5TVhkaFZrbDRWMjA1V2sxdGVFdFpNRlpQWkZaR2RXSkhhRmRsYkZZelZYcENUMU50UmxaaVJ6VnFVakExVDFWclZYaE9iRmw2WTBoS2JGSXdjRlZWVmxZd1VrZFNWbVJHYUdoTk1WcE5WbXBLYzFWR1RYaGFTRUpTVFVWYWRWVXhWVFZVUmxsNVlrWkNWRTFYVW5kV1JFSXdWMGRGZVdKRlZtaFdNMmd5V1ZjeGMyTXlTWGxqU0VKcFVucHNSbGxXWkRSa2JVWjBZa2hPYVUxdVFuZFphMk0xWW14dmQySkZVbE5TTW5oNldXcEtkMk5IU2toUFdFWm9Wak5vTTFaR1pHcE5SMDVJVW10YVQxTkZTbTlWYkZKVFpERnNWbFpyY0ZKTlJWcDFWVEZXVDFGc2IzZGlSa0pVVFZkU2QxWkVRakJYUjBaV1QxVjRWMDF0ZUZGVmVrWnJZakZGZDFKdE5WUldWVFZHV1Zaa05HUnNiM2xhUlZKclZsaFNXVmxVVGxkVVJsbDVaRWhDVTFJeWVIcFpha3ByWW1zMVNWRnRhRlJXVjNoUlZYcEdhMk50VWxaa1JtaG9UV3hhVFZacVNucGpiRTE0V2toQ1ZVMUlVbGxaVmxaUFVsZEdXR1ZJWkZSV01rMTNXVEJrUjFOck5VbFJiV2hVVmtaS00xZFdXazVOUjA1SVVteFdUMU5GU205Vk1WSlRaREZzVm1GNlFtcFNNRnBWVkd0b1EyRkdWalpWYm1SYVZsZHpkMWt3WkVkVGF6VkpVVzFvVkZaR1NqTlhWbFp5VFVkT1NGSnJXbFJXVlRWRFYycENjMUpHU2toaVNFNXBUVzVDZDFscll6VmliSEEyVlc1a1dsWlZWWGRaTUdSSFUyeE9WbFJyU21GbGJFb3pWMVpXYzFOc1JsbFRia0pwVTBWS1NsbFdaRFJrTVVwWVdrVndWVTFJVWxsWlZsWlBVV3h2ZDJKR1FsUk5WMUo1VjJ4V01GZEhSalZrUlhoWFRXMTRVVlY2Um10alJrVjNWVzVDYVZORlNrcFpWbVEwWkd4YVNHSklUbWxOYlZKMVZHdG9RMkZHVmpaVmJtUmFWbXN3ZDFrd1pFZFRhelZKVVcxb1ZGWkdTak5YVmxwT1RVZE9TRkpzVWs5VFJVcHZWVEZTVTJReGJGWmlSWEJTVFVaS2QxbHJZelZTVjBaWVpVaGFhR0pYZUhwWmFrWkhZbXhPVms5VmVGZE5iazU1VlhwR2EyTkdVWGRrUm1ob1ZsVTFRMWR1Y0ZOa01XeFdVbFJDYWxJd1drdFZNVlUxVkVaWmVXSkdRbFJOVjFKM1ZrUkNNRmRIUlhsYVNGcGhaV3hLTTFkV1drdFRiRkYzWkVab2FGWlZOVVpaVm1RMFpHeHZlVmw2UW1wU01GcFZWVEZWTlZSR1dYbGtSRVpVVFZkU2QxWkVRakJYUjBaV1QxVjRWMDF0VWxGVmVrWnJZbXhSZDJSR2FHaFdWR3hOVm1wS2IxSkdSbGhaZWtKcVVqQmFWRlJyYUVOaFJrNVZWVzVrV2xaWGMzZFpNR1JIVlRBMVNWRnRhRlpoYkVvelYxWldjazFIVGtoU2EzQlBVMFZLYjFWc1VsTmtNV3hXVmxSQ2FsSXdXa2RVYTJoRFlVWktWVlZ1WkZwV1YzTjNXVEJrUjFOc1RsWlBWWGhYVFc1T2VWVjZSbXRqUmxGM1pFWm9hRlpVYkUxV2Frb3dZMFpHV0ZsNlFtcFNNRnBUVkd0b1EyRkdVbFZWYm1SYVZsZHpkMWt3WkVkVGF6VkpVVzFvVmsxRk5IaFZla1pyWTIxU1ZtUkdhR2hXVkd4TlZtcEtjMVZHVFhoYVNFcG9WbFpLZDFscmFFTlVWMFpZWlVoYWFHSlhlSHBaYWtwM1kwZEtTVkZyTVdoV00yZ3pWVEJrYzJNeVNYbGpTRUpwVW5wc2VGbFdaRFJrTVZKWVdYcENhbEl3V2xWVWEyaERZVVpPVlZWdVpGcFdWM04zV1RCa1IxWkZOVWxSYldoV1lXeEtNMWRXVm5KTlIwNUlVbXR3VDFORlNtOVdWM1J6VlVaTmVGcElTa3hOU0ZKWldWWldUMUZzYjNkaVJrSlVUVmRTZVZONlFqQlhSMFpXVDFWNFYwMXRlRkZWZWtaclkyMVNWbVJHYUdoTk1WcE5WbXBLYzFWR1RYaGFTRUpWVFVoU1dWbFVSazlSYkc5M1lrWkNWRTFYVW5sVGVrSXdWMGRHVms5VmVGZE5iWGhSVlhwR2EyTnNWbGxUYmtKcFUwVktUbGxXWkRSa01VNVlXWHBDYWxJd1dsUlZNVlUxVkVaWmVXUkhlRlJOVjFKNVdsWldVMk5IU2tsUmEyeG9Wak5vTTFWc1pHcE5SMDVJVW14U1QxTkZTbTlXYTFaelZVWk5lRnBJU21GV1dGSlpXVlJPVjFSR1dYbGpNMHBVVFZkU2VWZHNWakJYUjBWNVZtdDRWMDF1VVRGVlZtUnJVMnhSZDJSR2FHaE5NVnBOVm1wS01HTkdSbGhhUlhCVlRVaFNXVmxZYkRCVVJsbDVaRVJHVkUxWFVuZFdSRUl3VjBkRmVWWnJlRmROYmxKVlZXdGtjMk15VGtabFNFSnBVMFZLUjFkcVFuTlNSa3BJWWtoT2FsSlhlSFZVYTJoRFlVWlZkMkpGU21waVYzaDZXVEJXYjJOSFNrbFJhMXBoVFVkNFJWVnJaSE5qTWs1R1lVaENhVk5GU2t0WGJuQlRaREZzVjFOcmNGSk5Sa3AzV1d0b1ExTlhSbGhsU0dSVVZqSk5kMWt3WkVkVk1VNVdUMVY0VjAxdVVYaFZla1pyWTJ4VmQxVnVRbWxUUlVwTFYyNXdVMlF4YkZkVGEzQlNUVVpLZDFscmFFTlRiRzkzWWtWU1UxSXllSHBaTUZZMFkwZEtTVkZyY0dGbGJFb3pWMVphU2sxSFRraFNiRTVVVmxSc1RWWnFTakJpUmsxNFdraEtWazFGV25WVk1WVTFWRVpaZVdSR1VsTlNNbmg2V1RCV05HTkhTa2xSYTFwVVRVZDRVVlY2Um10amJGVjNVbTAxVkZaVk5VWlpWbVEwWkRGS1dGcEZjRkpOUlZwMVZHdG9RMkZHVm5GVmJtUmFWbXR3UzFWVVFrZGlhelZKVVcxb1ZtRXllRVZWYTJSell6Sk9SbUpITlU5VFJVcHZWbGQwYzFKR1NraGlTRTVxVWxaYWRWVXhWazlTVjBaWVpVaGtWRll5VWt0VlZFSkhZbXhPVmxSclZtaFdNMmd6Vld4a2ExTnNSWGRWYmtKcFUwVktSMWR1Y0ZOa01XeFhVMnR3VWxaNmJIVlVhMmhEWVVaV2NtSkZVbEpXTWxKTFZrUkNNRmRIUlhoVWEwcGhUVWQ0UlZWV1pHcE5SMDVJVW14T1ZGWlZOVU5YYWtKelVrWkdXRmw2UW1wU01GcFVWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRbE5qUjBwSlVXdGFZVTFIZUZGVmVrWnJZMnhWZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCVlRVaFNXVmxVUms5UmJFMTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZaUFVXeHZkMkpGVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFJWVldaR3RUYkVWM1VtMDFWRlpWV2pKVmVrSnpZMFpPV0dKRmVGWldlbXhOVlRGU1EwNUhVbk5pTTJ4cFUwWmFSVmRxVGtOTk1XUlhZVVU1YkdKV1JqVlVNV2h6V1ZaRmQxSlVWbFJXZWtaaFdWWldUMkp0VGtoTlYyeE9UVWQ0ZFZkV1drOVJNazVJVTI1Q1VtSnRlR0ZXYm5CWFpGWmtjMVJ0Tld4aE0xSldXV3BDTUZKR1pFWlRXSEJZWVRBMVExUXhWbk5UUjBwSlZtMXdWRkpzYkROVmVrSlBVekZyZDAxVlZsVlhTRUpaV2xjeE1FNXNiSE5WVkVKaFRWWktXVlZ0TlhkaE1WbDZWVzA1V21KWGVFUldWbHB6VjFaU2RXTkhkRTVoYlhjeFZqSjBUMUZyTlhKaVJWSlVWMFZLUlZkcVNqUmxSbFpIVldzMVZFMUZOVmxaYTJONFZFWk9SbE5ZY0ZoaE1VWXpWREZrVDFOR1NuVmpSM0JPVFd4SmVWZFVTWGhWYlU1R1QxYzFhVTFJUWtWV01GcExaREZzYzFwR1dtdFdNREUxV2xWa05GbFdaRVpTYmxwVllrVTFlVlY2UWs5VmJVcEpXa2R3YVZZelozaFhhMVpQWW0xR1YyRkZWbEpYU0VKUFZGWm9UazFXVWxoTlNHUk9WbGQ0UjFaWE1UUmhNVWw1WlVoc1ZGWXllSGxWZWtKUFZXMUtTR0pIY0dsV2JIQjJWMVpvYTJSc1RuTmpSbWhzVTBoQ2FGWnJZelZVUmtWNFVtNU9UbEl3V2xsVVZtUTBWRmRLY2s1WWNGaGlSMUpZV2tSQ01GSldXbGxSYTFKaFRXNVNURmRVUW05VE1rNUlVMjVXVmxaNmJFdFphMmhyVFRGU1dXTkZPVnBoZW14V1ZXMDFVMVZYUmxaVGJFcFlWbTFvVUZwWE1WSmxWVGxaWWtkR1VrMUZjRlpXTVZwclRrZEdTRkpyVWxSWFJVcEZWMnBLTUZNeFpGVlRWRlpyVmpGS1NWbHJhRmRoTVZsNFZtdDRZVkpYVW5wYVJWcDNWa1UxV1dOSGJGTk5WbkI2VjFSQ1QySnJNVlprUmtwcVUwZFNjVmxzWkRSTlZuQkdWRzAxYUZadGFFWlZWbWgzVkdzeFdWUlVSbFZoTWs0elUzcENjMUl4Um5SaFIzQk9UVVJTTmxkWGNFOVRNa1YzWWtWYVZHSllhSEJaYkZaaFRsWk9XR0pJU2xSTlJUVjNWa1prYTFack1YSk9WRlphVm0xb1JGUlZWazlpYlVsM1pFZHNUazFFUlhoWFdIQlBZekpXZEZWcmFGZGliRXBOVlZSQ2QyTldiSEphUm1Sb1VqQTFkMVV4YUVOU1IwcHlVMnBXV2xadFRYaFVWVll3VWtaT1dHSkZjR0ZOTUVweFZrWldVMVJ0Vm5OYVJGcFRWa2RTVDFwWGRISk5NVkp5Vld0T2ExSlZOWFZaTWpGell6Sk9SbVZJUW1sU2VteDRXVlprTkdSdFJuUmlTRTVwVFc1Q2QxbHJZelZqVjBaWVpVaGFhR0pYZUhwWmFrcDNZMGRLU0U5WVJtaFdNMmd6VmtWa2MyTXlUa1psU0VKcFVucHNlRmxXWkRSa2JHOTVXa1Z3VWsxR1NuZFphMk0xWTFkR1dHVklXbWhpVjNoNldUQldOR05IU2toUFZsWm9Wak5vTWxaclpITmpNa2w0Vlc1Q2FWSjZiSGhaVm1RMFpHMUdkR0pJVG1sTmJrSjNXV3RqTldOWFJsaGxTRnBvWWxkNGVsa3dXa05qUjBwSlVXeEdhRll6YURKWlZ6RnpZekpKZVdOSVFtbFNlbXg0V1Zaa05HUnRSblJpU0U1cFRXMVNkVlJyYUVOaFJrcFZWVzVrV2xaV1ZYZFpNR1JIVW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zVVhka1JtaG9WbFJzVFZacVNuTlZSazE0V2toQ1ZVMUlVbGxaVlZaUFVsZEdXR1ZJV2xkU01uaDZXV3BLZDJOSFNraFBXRVpvVmpOb01sbFhNWE5qTWs1R1RWVjRUMU5GU205V1ZFSnpWVVpOZUZwSVNtaFdWa3AzV1d0b1ExTnNjRFpWYm1SYVZsWlZkMWt3WkVkUmF6VkpVVzFvVm1Gc1NqTlhWbHBPVFVkT1NGSnNVbFJXVkd4TlZtcEtjMUpHU2toaVNFNXBUVzFTZFZScmFFTmhSbFkyVlc1a1dsWnJhM2RaTUdSSFZsWk9WbFJyVm1oV00yZ3lXVmN4YzJNeVNYbGpTRUpwVTBWS1MxZHVjRk5rTVd4WFZWUkNhbEl3V2xWVWEyaERZVVphUlZWdVpGcFdWM2hMVlZSQ1IySnJOVWxSYldoU1ZrWktNMWRXV2s1TlIwNUlVbXR3VDFORlNtOVZNVkpUWkRGc1ZtRjZRbXBTTUZwTFZHdG9RMkZHU2xaaVJWSlNWakpTUzFaRVFqQlhSMFkxWkVWNFYwMXRlRkZWZWtaclkwWlJkMlJHYUdoTk1WcE5WbXBLYTFWR1RYaGFTRUpWVFVoU1dWZHFRazlTVjBaWVpVaGFhR0pYZUhwWmFrcDNZMGRLU1ZGcmNGUmxiRW96VjFaYVMxTnNVWGRrUm1ob1RXMTRSbGxXWkRSa2JGcElZa2hPYVUxR1NuZFphMmhEVkZkR1dHVklaRk5XTWsxM1dUQmtSMVV3TlVsUmJXaFdZVEo0UlZWclpITmpNa2w1V2tjMVZGWlZOVVpaVm1RMFpERk9TR0pJVG1wU1YzaDFWR3RvUTJGR1drVlZibVJhVmxkemQxa3daRWRUYXpWSlVXMW9WbUV5ZUZGVmVrWnJZMjFTVm1SR2FHaE5iRnBOVm1wS01FMVdUWGhhU0VKVlRVaFNXVmxXVlRWVVJsbDVZa1ZTVWxZeVRYZFpNR1JIVmtVMVNWRnRhRlJXUmtvelYxWldjMU5zUlhkVmJrSnBVbnBzUmxsV1pEUmtiVVowWWtoT2FVMVZXblZWTVZVMVZFWlplV016U2xSTlYxSjNWa1JDTUZkSFJsWlVhMHBoVFVkNFJWVnJaSE5qTWs1SFVXNUNhVko2YkhoWlZtUTBaRzFHZEdKSVRtcFNWbHBOVlRGV1QxSlhSbGhsU0ZwWFVqSjRlbGxxUWxOalIwcEpVV3R3WVUxSGVFVlZhMlJ6WXpKT1JsWnROVTlUUlVwdlZsZDBjMVZHVFhoYVNFSlNUVVpLZDFscll6VmliSEEyVlc1a1dsWnJOVXRXUkVJd1YwZEZlRlJyVm1oV00yZ3pWbFZrYzJNeVNYbGpTRUpwVW5wc2VGbFdaRFJrTVZKWVdYcENhbEl3V2xSVk1WVTFWRVpaZVdSRVJsUk5WMUo1VTNwQ01GZEhSbFpVYTBwaFpXeEtNMWRXVmxaTlIwNUlVbXhPVDFORlNtOVZNVkpUWkRGc1ZtRjZRbXBTTUZwSFZHdG9RMkZHU2xWVmJtUmFWbFpWZDFrd1pFZFNhelZKVVcxb1ZGWkdTak5YVmxaelUyeFJkMlJHYUdoTk1WcE5WbXBLYzFWR1RYaGFTRUpTVFVWYWRWVXhWazlTVjBaWVpVaGtWVkl5ZUhwWmFrcDNZMGRLU0U5WE5XRk5SVFI0VlhwR2EyTnRVbFprUm1ob1ZsUnNUVlpxU25OVlJrMTRXa2hDVlUxSVVsbFpWbFUxVkVaWmVXSkdRbFJOVjFKM1ZrUkNNRmRIUmxaUFZYaFhUVzVSZUZWNlJtdGpiVkpXWkVab2FGWlViRTFXYWtwelZVWk5lRnBJU21oV1ZrcDNXV3RvUTFSWFJsaGxTRnBvWWxkNGVsbHFTbmRqUjBwSlVXdHdZVTFIZUZGVmVrWnJZMjFTVm1SR2FHaFdWR3hOVm1wS2MxVkdUWGhhU0Vwb1ZsWktkMWxyYUVOU2JIQTJWVzVrV2xacmEzZFpNR1JIVmtVMVNWRnRhRlJXUmtvelYxWldjazFIVGtoU2EzQlBVMFZLYjFVeFVsTmtNV3hYVkZSQ2FsSXdXbFpVYTJoRFlVWk9WbUpGVWxKV01rMTNXVEJrUjFaVk5VbFJiV2hVVmtaS00xZFdWbkpOUjA1SVVteFNUMU5GU205V1dIQlRaREZzVm1GNlFtcFNNRnBMVkd0b1EyRkdWWGRpUlZKU1ZqSk5kMWt3WkVkVk1EVkpVVzFvVkZaR1NqTlhWbFp5VFVkT1NGSnNVbEpOTVZwTlZtcEtNR0pHVFhoYVNFcHJWbGhTV1ZsVVNuTlNWMFpZWlVoa1ZsSXllSHBaTUZadlkwZEtTVkZyTVdoV00yZ3pWVEJrYzJNeVRrWmxTRUpwVTBWS1RsbFdaRFJrTVU1WVdYcENhbEl3V2xSVk1WVTFWRVpaZVdSSGVGUk5WMUo1V2xaV1UyTkhTa2xSYTFwaFRVZDRVVlY2Um10amJVWldWVzVDYVZORlNrcFpWbVEwWkRGS1dGcEZjRkpOUmtwM1dXdG9RMU5YUmxobFNHUlRWakpOZDFrd1pFZFdSVFZKVVcxb1ZtRXllRkZWZWtaclkyeHdWbVJHYUdoTk1WcE5WbXBLTUdOR1JsaGFSWEJWVFVoU1dWbFliREJVUmxsNVpFUkdWRTFYVW5kV1JFSXdWMGRGZVZacmVGZE5ibEpWVld0a2MyTXlUa1psU0VKcFUwVktSMWRxUW5OU1JrcElZa2hPYWxKV1duVlZNVlUxVkVaWmVXUkdTbXBpVjNoNldUQldiMk5IU2tsUmEyeG9Wak5vTTFVeFpHcE5SMDVJVW14U1ZGWlViRTFXYWtvd1ZrWktTR0pJVG1wU1dHaDNXV3RvUTFOWFJsaGxTR1JUVmpKU1MxVlVRbE5qUjBwSlVXdHNhRll6YUROVk1XUnFUVWRPU0ZKc1RsUldWVFZEVjJwQ2MxVkdUWGhhU0VwV1RVVmFkVlV4Vms5UmJIQTJWVzVrV2xacmNFdFdSRUl3VjBkRmVGUnJTbUZsYkVvelYxWmFTMU5zVVhka1JtaG9UVzE0UTFkcVFuTlZSazE0V2toS2ExWllVbGxaVkVwelVsZEdXR1ZJWkZSU01uaDZXVEJXVjJKc1RsWlBWWGhYVFc1U1ZWVldaR3RUYkVWM1VtMDFWRlpVYkUxV2Frb3dWVzFPZEdKSVRtcFNWbHAxVkd0b1EyRkdWbkppUmtKVVRWZFNlVlpVUWxOalIwcEpVV3RhWVdWc1NqTlhWbHBMVTJ4UmQyUkdhR2hOVlRWRFYycENjMUpHU2toaVNFNXFVbFphZFZVeFZrOVJiSEEyVlc1a1dsWnJjRXRWVkVKSFlteE9WbFJyU21GTlIzaEZWVlprYWsxSFRraFNiRTVVVmxVMVExZHFRbk5WUmsxNFdraEtWazFGV25WVk1WVTFWRVpaZVdSSVFsSldNbEpMVmtSQ01GZEhSWGhVYTBwaFRVZDRSVlZXWkd0VGJGRjNaRVpvYUUxVk5VTlhha0p6VVcxSmVWcEZjRlZOU0ZKWldWUkdUMUpYUmxobFNHUlRWakpTUzFWVVFrZGliRTVXVDFWNFYwMXVVbFZWVm1SclUyeEZkMVZ1UW1sVFJVcEhWMnBDYzFKR1JsaGFSWEJTVFVWYWRWVXhWazlSYkc5M1lrVlNVbFl5VWt0V1JFSXdWMGRGZUZSclNtRmxiRW96VjFaYVMxTnNSWGRTYlRWVVZsVTFSbGxXWkRSa01VcFlXa1Z3VlUxSVVsbFpWRVpQVVd4dmQySkZVbEpXTWxKTFZWUkNVMk5IU2tsUmExcGhUVWQ0UlZWV1ZucE5SMDVJVW14T1ZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2EzaFNUVzE0UzFsV1ZuTmpSMFYzWkVkb1dGSlZXblZXVlZwUFVUSldkRlZyYkZSV2VteHZWbTV3VjAweGNFZGhSa3BwVFVkNGQxVlhkSE5oVlRCM1RraGtWVkpGU25wYVJFRTFZMFpPV1ZGcmVGWlhSVWw2VjFkd1QxTXdNVVppUlZaT1VqSlNiMVp1Y0Zaa01VMTNXa2hPYTFZd05VcFdiWEJEVkVaRmQySkhOVmRXVjAweFdsWmtVMUpYU1hsaVJYaFdUVzVTVFZZeFVrdGlNbEowVW14b1ZXSllhRXRWYTFKRFlteHNObFJzVG14V1dGSkpXV3RvVjJGc1RrZFhXR1JVVFVVMVMxZHFSbXRXYkVweVpVWk9WMVpHU25WV1YzUlhWVEZXUjFacVdsQlNlbXh6Vmxod2MwMVdUWGhWYmxwb1ZsaFNWVmxVUWpCaE1VbDVaVVJDV0dKSGFFOVhha1pEVmtaR2RWRnRiR2xpUlZveVYxWmFhazFYVVhsVmJHeFdWbnBzUzFsV1ZrdFZiR1JYV2tVNWFtSklRbHBXVnpWM1UyeE9SbE51VGxwTmJYaEVXa2N4UzJSR1dsaGFSbkJPWVcxM2VGZFhNSGhXTWtaMFZXdG9hVk5HY0hCWlZ6QTFZMFpOZUZSdVNsUk5iRXBKV1ZWb2MxbFdXWGRYYmtwYVRUSjRRMVF4Vm5OVFIwcEpWbTEwVWsxdGFETlhWekF4VVRBeFdGVnJVbUZOYlhoTFZXMTRTMlJzYTNsTlZtUm9VbTVDU2xaR1VtRlRiVVpZWkVoa1VrMXFSbFJaYTFwM1kwWkdkV0pIZEZkbGJFb3lWWHBHVTJSc1RYZFViR2hXWWxkb2NsVnFRbGRpYkZaSFZHdE9iRlp0ZUZsVWJHUXdZVlV4Y1ZGcVJsaFNSVFZZV2xaYWMxZEZOVmhrUjJ4T1lXdEtNbFpHV2xOUmJWWldUbFZTYUUxSVVrVldha293WW14V1IxUnJUbXhXYlhoWlZHeGtNR0ZWTVhGUmFrWllWa1Z3ZGxwSE1VZFhSbEowWlVWNFVrMXRVbmRXYWs1elpERndSbUpJUW10TmJYaFpXbFpXWVdFeFRsaGlSRTVvVm0xUk1WWkhNVk5UYlVaWVpFaGtVazF0VW5wVVZFcEhVMGRLU1ZSdFJsWk5SWEJYVjFSSk1WWXlTa1pQVnpWcFRVaENSVll3V2t0T1ZuQlhWVzVhVkUxRk5WTlpWRUozWVcxV1ZsSlVWbFJXVjJoUVdrZDRjbVZYVWtobFIzUlNaV3haTWxkWGNFdFVNazV6WTBac1ZsWjZiSEZVVjNCelkxWnNWVk5zWkU1U1dHaDVWVzEwYTFkVk1VaGxSa0pXWWtad1UxbDZRbk5UVmxKMVYyeHdUbUpzU25wWGExWk9UVlphUjFWWVpGVmhNMmhhVkZWYVMxTldXbGhrUldSVllUTlNVMWxxUW5kU1JsWllaVWM1V0dFeVVsUmFWbFp6VWxVeFNGcEZlRlJTVkZJelYxUktjMkl5VGtoVWExSm9UVEExYjFadWNGWmtNVTEzWVVWT2EySlZOVEZXVm1oRFZFWldXRTlWZEZKTlZWcDZXV3hrU21Wc1RsaGFSM2hTVFVWd00xZFhNWE5STWxaWFlrWm9UMVo2Vm1oV1ZFcHVaREZzVjFremFHbFNNRFF4V1Zod1lWSkdiM2xrUlhSU1RWVmFlbHBYZERSa1ZsSjBaVWRzYVZacmJETlhWelZ6WWpKRmVHSkdiRlppVjJoT1ZXcENZV05zWkhKaFJYQnFVbFUxZFZsVVFuZFNSbVJHVTJwV1dsWnRUWGhVVlZZd1UwZEZlVnBGZUd4V1YzaDFWbTV3UjJRd05VWmlSV1JXWWxob1lWWnVjRWRoTVU1V1YyeE9hMkpWV1RGVlYzaFhZVlV4ZFZSdE5WZGhNazB4V1RKMGMxSXhSblJoUjJoT1lrWnNNMVV4V2s5U2JVWkdZa2hDYUUxSVVrVldWbVEwWXpGd1ZscEZPV2xTTURWS1ZsWlNZVkpHYjNsa1JYUlNUVmRvUkZwV1pFZFhSVFZWVVd0NFVrMUlRbkJWTVZwYVpERnZlRk5yYUZCV1JUVndXVlpXVjJJeFRsZFVhM0JxVWxVMWRWa3daREJaVmxsNFlrYzFXazFxVmxoYVJsVjRZMFp2ZWxGc1FtRk5hbXhNVmpKMGExSXdNVWRpUmxKU1ZrZDRTMVV3Vm5kaU1XeDBUVlpPYTJKVmNGVlViR1JoWVRGa1JtTkhPVnBpVkVaVVdrY3hTMVpHYjNwaFJUbG9Wak5TVFZWVVJtdGpiRzk0VVd4U1VtSnRlR0ZXYm5CWFkyeHNjVk5ZWkd0V2JYUTFXVlZvWVdGR1dYZE9XRTVVVFVVMWRWbFdXbXRPVjA1SVZXdHdhRmRIVW5kV2FrNXpVakZ3Um1KSVFtdE5iWGhaV2xaVk1XRXhUbGhpU0VwcVVsVTFkVmxyVWs5aFJrbDVaVWh3V0dKRk5VUldiR1JQWkZaYWRHVkdRbUZOYW14TVZWUkdiMVV5VmxoV2JGWnBUVWhTUlZaV1pEQlRNV3Q2WWtWS1VGWlhlRXBXUnpWaFYyc3hkVlZ1VG1GU1ZUQjRXbGN4U21WV1VuVlRiVVpZVW10YU1sZFljRXBPVjBaMFVsaHNWMkZyU2s1WlZFSmhVMFprUlZGdVRsVk5WWEJZVmxab1QxTnNUa1pPVkVwWVZrVnZkMWxyWkZOU1JUVlhWV3hXVGxKVVZrNVdNRkpIVkRGYVYxWnVTbGRoTUhCV1ZsUktNRlJHUlhoU2JrcFVZbFUwTVZSc1pIZGhWVEZ4Vm1wR1dHSkhVbEJVVlZZd1VrZEdTVkZ0Y0ZKTk1tZDZWMWR3VDFNd01VWmtSbEpvVFVoU1JWWldaREJUTVd0NllYcEdiR0pJUWxsVWJHUXdWRVpKZUZOdE9XRlNWMUpIV1RCV1QySnRSWGRqUlZKWFRWaEJlVmRVU25OUk1EVkdZa1ZvYVZOR1drdFZNRlozWWpGc2RFMVhkR2xTV0ZKS1ZsYzFRMkZXV1hoWGFscFVUVlpLTWxWNlFrOVZiVVYzWTBWU1dGSlVSWGhYV0hCTFZqSlNWMk5GVW1oU00xSmhWakJhUzJJeFRYaFNibHBVWVRBMVUxbHJhR3RoYlVwWVpVUkdZVkpWTlhaWk1GWnpVa2ROZVdKRmNGTmliRXB2VjJ4V1QxRXhXbGRqUm1oVFlteEtXbFpVUWt0V2JHeHhVMjV3WVUxV2NFbFVNV2hMVTJ4S2MxTnFTbHBYUjNoRVZsWmFjMWRIVWtobFIzUlNUVVphZGxVeFdrOVRiVTVHVkcwMWFFMUlRbWhXTUdSdlkxWmtjMkZGVGs1U1ZHeDFXV3BDZDFKR1ZsaGxSRnBWVW5wR1VGbDZTa3BsYkZKMFpVVjRVazF1VWsxVlZFWkhZMnhPZEZScmJGUmlhMHB3V1cxNFIyUnNUbGhsU0hCcVZtMW9WVlZYZEZkaFZUQjVWV3BHVkZack5VZFpWVlp6WTBkRmQyUkZVbWxXYmtGNVYxUktjMUV3TlZaaVJXaHBVMFphUzFVd1ZuZGlNV3gwVFZkMGFWSllVa3BXVnpBMVlXMUtWMWR0T1ZoaE1taFBXVEJWTldKdFNYZGpSMmhYVFZkNGRWWXhVa3RpTWxKMFVteG9WV0pZYUV0VmExSkNUbFpPVmxSdGRFOVdXRUV5V1dwQ01GSkdWbGhrTTJSYVZsVTFRMVF4Vm5OVFZsWjBUMWR3YVZac2NIWldNblJyWXpKU1YyTkVWazlXYkZwdlZUQldkMk14WkZkYVJrcHBUV3hLU1ZWdE5YTlpWVEZ6VjFoa1ZGWldSak5YYWtwUFpGWmFkVlpyZUZaV2VteE1WVlJHYjFVeVNYZGxTRlpWWVd0S1lWWXdWblprTVUxM1ZHNUtWRTFGTlZsV2JUVlBZV3N4YzFaVVNsSk5iVko1VlRJeFUxTkdiM2xhUmtaV1RVVnNNMWRXVm05VE1rcEhZa1pvVm1KclNuQlpiR1JQVFZaYWNscEhPV3hXYmtKWlZXMHhNRlJHVGtkVGJUbGFUV3BHY2xsclpGTlNSa1pWWWtWd1ZGSlhPVFJYVnpGM1UyMU9SbFJ0TldoTlNFSnlWV3BLYTAxV2JEWlViRTVvVWpBMU1WWldZelZVUmxaVlRVUnNTbUZYZEhkSmFXdHdJaWtwIikp"))"))